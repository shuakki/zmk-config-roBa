#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 6
#define SCROLL 7
#define NUM 8

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        bt0: bt0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog_off 1 &tog_off 2>,
                <&macro_wait_time 200>,
                <&bt BT_SEL 0>,
                <&macro_wait_time 500>;

            label = "BT0";
        };

        bt1: bt1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog_off 1 &tog_off 2>,
                <&macro_wait_time 200>,
                <&bt BT_SEL 1>,
                <&macro_wait_time 500>,
                <&tog_on 1>;

            label = "BT1";
        };

        bt2: bt2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog_off 1 &tog_off 2>,
                <&macro_wait_time 200>,
                <&bt BT_SEL 2>,
                <&macro_wait_time 500>,
                <&tog_on 2>;

            label = "BT2";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };

        tog_on: toggle_layer_on_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer On";
            toggle-mode = "on";
        };

        tog_off: toggle_layer_off_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC       &kp W         &kp E               &kp R      &kp T                                                               &kp Y          &kp U  &kp I      &kp O       &kp P
&kp A         &kp S         &kp D               &kp F      &kp G             &lt 9 C_VOLUME_DOWN      &kp C_VOLUME_UP          &kp H          &kp J  &kp K      &kp L       &kp ENTER
&mt LSHIFT Z  &kp X         &kp C               &kp V      &kp B             &kp SQT                  &kp LEFT_PARENTHESIS     &kp M          &kp M  &kp COMMA  &kp PERIOD  &kp MINUS
&kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 8 Q  &lt 3 TAB  &lt 7 LANGUAGE_2  &lt 5 SPACE              &mt LEFT_WIN LANGUAGE_1  &kp BACKSPACE                                &lt 5 ESCAPE
            >;
        };

        win_layer {
            bindings = <
&kp ESC           &kp W         &kp E               &kp R      &kp T                                                                   &kp Y          &kp U  &kp I      &kp O       &kp P
&kp A             &kp S         &kp D               &kp F      &kp G             &lt 9 C_VOLUME_DOWN      &kp C_VOLUME_UP              &kp H          &kp J  &kp K      &kp L       &kp ENTER
&mt LSHIFT Z      &kp X         &kp C               &kp V      &kp B             &kp SQT                  &kp LEFT_PARENTHESIS         &kp M          &kp M  &kp COMMA  &kp PERIOD  &kp MINUS
&kp LEFT_CONTROL  &kp LEFT_ALT  &lt_to_layer_0 8 Q  &lt 3 TAB  &lt 7 LANGUAGE_2  &lt 6 SPACE              &mt LEFT_CONTROL LANGUAGE_1  &kp BACKSPACE                                &lt 5 ESCAPE
            >;
        };

        ipad_layer {
            bindings = <
&kp ESC       &kp W         &kp E               &kp R      &kp T                                                               &kp Y          &kp U  &kp I      &kp O       &kp P
&kp A         &kp S         &kp D               &kp F      &kp G             &lt 9 C_VOLUME_DOWN      &kp C_VOLUME_UP          &kp H          &kp J  &kp K      &kp L       &kp ENTER
&mt LSHIFT Z  &kp X         &kp C               &kp V      &kp B             &kp SQT                  &kp LEFT_PARENTHESIS     &kp M          &kp M  &kp COMMA  &kp PERIOD  &kp MINUS
&kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 8 Q  &lt 3 TAB  &lt 7 LANGUAGE_2  &lt 5 SPACE              &mt LEFT_WIN LANGUAGE_1  &kp BACKSPACE                                &lt 5 ESCAPE
            >;
        };

        ARROW+alfa {
            bindings = <
&trans         &kp LA(LEFT_ARROW)  &kp UP_ARROW        &kp LA(RIGHT_ARROW)  &trans                      &kp LA(F1)        &kp HOME            &kp UP_ARROW      &kp END             &kp F5
&kp PAGE_UP    &kp LEFT_ARROW      &kp DOWN_ARROW      &kp RIGHT_ARROW      &kp F2  &trans      &trans  &kp LA(NUMBER_1)  &kp LEFT_ARROW      &kp DOWN_ARROW    &kp RIGHT_ARROW     &kp F10
&kp PAGE_DOWN  &kp LG(LEFT_ARROW)  &kp LG(UP_ARROW)    &kp LG(RIGHT_ARROW)  &trans  &trans      &trans  &kp LG(V)         &kp LS(LEFT_ARROW)  &kp LS(UP_ARROW)  &kp LS(DOWN_ARROW)  &kp LS(RIGHT_ARROW)
&trans         &trans              &kp LG(DOWN_ARROW)  &trans               &trans  &trans      &trans  &kp DELETE                                                                  &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        CtrlCommand_Scroll_mac {
            bindings = <
&trans     &kp LG(W)  &kp LG(E)  &trans     &kp LG(T)                         &trans  &trans  &trans  &trans  &trans
&kp LG(A)  &kp LG(S)  &trans     &kp LG(F)  &kp LG(G)  &kp ENTER      &trans  &trans  &trans  &trans  &trans  &trans
&kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LG(B)  &kp DEL        &trans  &trans  &trans  &trans  &trans  &trans
&trans     &trans     &trans     &trans     &trans     &trans         &trans  &trans                          &trans
            >;
        };

        CtrlCommand_Scroll_win {
            bindings = <
&trans     &kp LC(W)  &kp LC(E)  &kp LC(N9)  &kp LC(T)                         &trans  &trans            &trans                &trans  &trans
&kp LC(A)  &kp LC(S)  &trans     &kp LC(F)   &kp LC(G)  &kp ENTER      &trans  &trans  &kp LG(V)         &kp LS(LG(S))         &trans  &trans
&kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)   &kp LC(B)  &kp DEL        &trans  &trans  &kp LC(NUMBER_2)  &kp LS(LC(NUMBER_2))  &trans  &trans
&trans     &trans     &trans     &trans      &trans     &trans         &trans  &trans                                                  &trans
            >;
        };

        NUM {
            bindings = <
&trans         &kp AMPERSAND    &kp SQT          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS                         &kp ASTERISK     &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS
&kp SEMICOLON  &kp DOLLAR       &kp PERCENT      &kp CARET             &kp DOUBLE_QUOTES      &trans         &trans  &kp EQUAL        &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp ENTER
&kp QUESTION   &kp EXCLAMATION  &kp KP_NUMBER_2  &kp KP_NUMBER_3       &kp PERIOD             &kp EQUAL      &trans  &kp SLASH        &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp MINUS
&trans         &trans           &trans           &trans                &trans                 &trans         &trans  &kp KP_NUMBER_0                                                     &kp PERIOD
            >;
        };

        Left_hand_tool {
            bindings = <
&kp ESCAPE      &kp F7  &kp F8  &kp F9  &kp F10                        &trans  &trans  &trans  &trans  &trans
&kp DELETE      &kp F4  &kp F5  &kp F6  &kp ENTER  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp F1  &kp F2  &kp F3  &kp F11    &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans  &trans  &trans  &trans     &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt0    &bt1    &bt2    &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans  &trans  &trans  &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans  &trans  &trans  &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                &bt BT_CLR_ALL
            >;
        };
    };
};
